/*
 * Simple Temperature API
 *
 * This API is meant as an exchange mechanism for temperature readings
 *
 * OpenAPI spec version: 1.0.0
 * Contact: stephen@solenoidsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TemperatureReading : IEquatable<TemperatureReading>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Sensor
        /// </summary>
        [Required]
        [DataMember(Name="sensor")]
        public TemperatureSensor Sensor { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [Required]
        [DataMember(Name="dateTime")]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [Required]
        [DataMember(Name="value")]
        public float? Value { get; set; }

        /// <summary>
        /// C - Celcius F - Fahrenheit K - Kelvin R - Rankine D - Delisle N - Newton E - Réaumur O - Rømer 
        /// </summary>
        /// <value>C - Celcius F - Fahrenheit K - Kelvin R - Rankine D - Delisle N - Newton E - Réaumur O - Rømer </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum UnitOfMeasureEnum
        {
            /// <summary>
            /// Enum CEnum for C
            /// </summary>
            [EnumMember(Value = "C")]
            CEnum = 0,
            /// <summary>
            /// Enum FEnum for F
            /// </summary>
            [EnumMember(Value = "F")]
            FEnum = 1,
            /// <summary>
            /// Enum KEnum for K
            /// </summary>
            [EnumMember(Value = "K")]
            KEnum = 2,
            /// <summary>
            /// Enum REnum for R
            /// </summary>
            [EnumMember(Value = "R")]
            REnum = 3,
            /// <summary>
            /// Enum DEnum for D
            /// </summary>
            [EnumMember(Value = "D")]
            DEnum = 4,
            /// <summary>
            /// Enum NEnum for N
            /// </summary>
            [EnumMember(Value = "N")]
            NEnum = 5,
            /// <summary>
            /// Enum EEnum for E
            /// </summary>
            [EnumMember(Value = "E")]
            EEnum = 6,
            /// <summary>
            /// Enum OEnum for O
            /// </summary>
            [EnumMember(Value = "O")]
            OEnum = 7        }

        /// <summary>
        /// C - Celcius F - Fahrenheit K - Kelvin R - Rankine D - Delisle N - Newton E - Réaumur O - Rømer 
        /// </summary>
        /// <value>C - Celcius F - Fahrenheit K - Kelvin R - Rankine D - Delisle N - Newton E - Réaumur O - Rømer </value>
        [Required]
        [DataMember(Name="unitOfMeasure")]
        public UnitOfMeasureEnum? UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemperatureReading {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sensor: ").Append(Sensor).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TemperatureReading)obj);
        }

        /// <summary>
        /// Returns true if TemperatureReading instances are equal
        /// </summary>
        /// <param name="other">Instance of TemperatureReading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureReading other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Sensor == other.Sensor ||
                    Sensor != null &&
                    Sensor.Equals(other.Sensor)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.Equals(other.DateTime)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    UnitOfMeasure == other.UnitOfMeasure ||
                    UnitOfMeasure != null &&
                    UnitOfMeasure.Equals(other.UnitOfMeasure)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Sensor != null)
                    hashCode = hashCode * 59 + Sensor.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (UnitOfMeasure != null)
                    hashCode = hashCode * 59 + UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TemperatureReading left, TemperatureReading right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TemperatureReading left, TemperatureReading right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
