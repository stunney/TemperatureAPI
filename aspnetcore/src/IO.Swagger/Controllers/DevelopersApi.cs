/*
 * Simple Temperature API
 *
 * This API is meant as an exchange mechanism for temperature readings
 *
 * OpenAPI spec version: 1.0.0
 * Contact: stephen@solenoidsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    { 
        /// <summary>
        /// searches readings
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for temperature readings in the system </remarks>
        /// <param name="searchString">pass an optional search string for looking up readings</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <param name="startDate">DateTime (UTC) starting (inclusive) for search</param>
        /// <param name="endDate">DateTime (UTC) ending (exclusive) for search</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/Solenoid/Temperature/1.0.0/temperature")]
        [ValidateModelState]
        [SwaggerOperation("SearchTemperatures")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TemperatureReading>), description: "search results matching criteria")]
        public virtual IActionResult SearchTemperatures([FromQuery]string searchString, [FromQuery]int? skip, [FromQuery][Range(0, 50)]int? limit, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TemperatureReading>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"unitOfMeasure\" : \"C\",\n  \"sensor\" : {\n    \"name\" : \"User-friendly name for a sensor\",\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n  },\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : 32\n}, {\n  \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"unitOfMeasure\" : \"C\",\n  \"sensor\" : {\n    \"name\" : \"User-friendly name for a sensor\",\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n  },\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n  \"value\" : 32\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<TemperatureReading>>(exampleJson)
                        : default(List<TemperatureReading>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
